Resources are released as classes in special xs.resource namespace
contracts:
xs.resource.IResource - base contract, that is implemented by all resources' classes

Base resource classes:
xs.resource.text.CSS - base CSS contract
CSS stylesheets are not loaded to memory with JS, only links are hold and attached/removed from browser's head
CSS = xs.resource.CSS
CSS.method.load - preloads CSS stylesheet
CSS.method.attach - attaches CSS file to head
CSS.method.detach - detaches CSS file from head
when CSS is loaded, it is added to head with disabled="disabled" attribute and removed from head when loaded

xs.resource.binary.Image
Images may be used when displaying some photos, etc with preloaders
Images do not need to be stored as blob, by default
Image.method.load - load image with promise (in hidden img element, perhaps)
Nice decision will be to have a support for alternatives (by priority)
TODO define, if there is a way to get list of formats, supported by browser

xs.resource.binary.Video
Videos TODO needed strict backend limitations and complete review before implementing - that relates to an implemented video component

xs.resource.binary.Audio
Audio TODO needed strict backend limitations and complete review before implementing - that relates to an implemented audio component

xs.resource.binary.File
Files are loaded directly in memory and stored as an ArrayBuffer by default
File.method.load - loads file with promise (returns ArrayBuffer on load)
File.method.destroy - removes link to file's contents stored in ArrayBuffer

xs.resource.text.HTML
HTML most commonly means a loaded template
HTML.method.load - loads file with promise (returns String on load)

xs.resource.text.JSON
HTML most commonly means a loaded template
HTML.method.load - loads file with promise (returns String on load)