Data storage
Models temporary collections are provided via queries - they are selections, that are (optionally) syncronized with sources
Sources are responsive for interaction with other data layers - on the server and in the local storage

Here transactions mechanism is introduced

Data storage and processing are separated. Storage is performed via xs.data.Store and processing - via xs.data.Query.
Queries allow selections, joins, sorting and so on. Proxy must be defined for store and is optional for query and xs.data.Model itself.
As far as stores are global singletons, there is a registry, where models are linked to stores.

Transactions are needed. Multiple transactions must be supported at once - a bit like ExtJS batch operations
Atomicity of transactions depends on operations' set - some operations will be revertable, some - not

Version 3:

Sources are instantiated, providing custom operations (may be additional preprocessor?) besides default ones:
- create single
Model is created externally, saved - with store, when added to it
- create multiple
Models are created externally, saved - either sequentially or in batch mode (if source supports respective operation)
- read single by primary key
Model is fetched via source's proxy by primary key. Optionally - added to source
- read multiple by primary keys
All models are fetched via source's proxy by primary keys (returned as xs.core.Collection). Optionally - added to source
- read all
All models are fetched via source's proxy. Optionally - added to source
- update single by primary key
Model must be attached to source to be saved.
- update multiple by primary keys
Models must be attached to source to be saved. Saved - either sequentially or in batch mode (if source supports respective operation)
- delete single by primary key
Source removes either model (then it will be destroyed), or achieves primary key.
If model is destroyed - it is removed from source, but no delete is sent
- delete multiple by primary keys
Source removes either models (then it will be destroyed), or achieves primary keys (if batch mode supported)
If model is destroyed - it is removed from source, but no delete is sent
- delete all
Source' remove method was called without params

xs.data.Selection - valid for readonly, optionally reactive, data selections
They can contain joins, calculated fields, etc

Sources support batch operations in order create-update-delete - via method save, that reads all unsaved changes

Operations can be easily added.
Each proxy can support different operations.
Sources must define which operations they need to be supported,
so that proxy (which can be dynamically assigned) will be verified on assignment.
Each operation must declare a method, that must be defined by both proxy and source

More than that, source class is declared to work with exact model class.
Models can although define different supported operations.

Each operation must declare, how it can be supported:
- both model and store
- model only
- store only

Used mixins: NO NEED ON START
- cacheable - to allow to cache resource
- paginal - to add pagination
Obviously, using both plugins must allow cached pagination

Additionally, model, when declared, contains:
- attributes
- some attributes are declared as primary ones
- foreign keys specifications (complex keys support needed)
when foreign keys are specified, source can be binded to another one (that one should be mentioned by one of foreign keys)
and force that store to load dependent data.

Model's behavior depends on whether it can be attached to source
If model can not be attached, it can have it's own proxy
If model is defined as attachable to source, it can not have it's own proxy

Version 2:
xs.data.Source - static table-like storage. Sources are linked each one together via relationships - one-one|one-many|many-many
each source is configured with at least 2 params: cache and page
next source types must be handled:
- fully cached sources - they do not need to be loaded from server, proxy targets to source, that is already completely loaded to the memory:
localStorage, SessionStorage, IndexedDB or in-memory proxy with given data
- dynamically loaded sources - they can be cached or not cached. for example - their proxy loads data from server with specified url
caching is usefull only when list is great and source is not dynamic.
on the other hand - there are such storages, like WFS services, and objects are queried from them with additional dynamic proxy params
it that case storages concept may be harmful indeed

On the other hand - how to define relationships between different models?

Version 1:

xs.data.Source - static table-like storage. Sources are linked each one together via relationships - one-one|one-many|many-many
xs.data.Query - query on one/many storages that provides data like SQL queries:
in select mode - joining sources, producing virtual selection elements - xs.data.query.Item's
or without joining - selecting real models?
in update/delete mode - selecting some models (virtually) from source and updating/deleting them (in this case -
are models created indeed, or update is sent via proxy?)

How is performed operation, when some elements are loaded to source via proxy and some - still not?
Perhaps, source is needed for caching only?

Data storage
Models temporary collections are provided via queries - they are selections, that are (optionally) syncronized with sources
Sources are responsive for interaction with other data layers - on the server and in the local storage