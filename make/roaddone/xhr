XHR - single request
XHR - connection (to perform multiple requests) - is it necessary? No - custom components will be used for that case
XHR must support CORS, binary requests, form data
XHR although must support uploads and downloads with progress events both sides
XHR must support custom request headers and access to response headers

Events:
xs.transport.http.event.Headers - is fired, when response headers are received. The first event, that contains Response object
xs.transport.http.event.Progress
xs.transport.http.event.Load
xs.transport.http.event.Error
xs.transport.http.event.Timeout
xs.transport.http.event.Abort


xs.transport.http.Request - Request class
Request.constructor = xs.noop;
Request.property.method = {
    set: function(Enum xs.transport.http.Method)
}
Request.property.url = {
    set: function(xs.uri.HTTP)
}
Request.property.data = {
    set: function(xs.uri.HTTP) //FormData xs.data.Form
}
Request.property.type = { //Enum needed
    set: xs.noop
}
Request.property.headers = {
    set: xs.noop
}
Request.property.timeout = {
    set: function(number) {

    }
}
Request.property.upload = { //marks request as an upload one, this way progress events are sent on XMLHttpRequestUpload
    set: function(boolean) {

    }
}
Request.property.credentials = {
    set: function(boolean) {

    }
}
Request.property.state = {
    set: xs.noop
}


Request.method.abort = function(){} //aborts XHR and calls reject

Request.method.send = function(){} //forms and sends XHR. Returns xs.core.Promise



xs.transport.http.Response - Response class
Response.constructor = function(request) {

}
Response.property.request = {
    set: xs.noop
}
Response.property.response = {
    set: xs.noop
}
Response.property.status = {
    set: xs.noop
}
Response.property.statusText = {
    set: xs.noop
}
Response.property.headers = {
    set: xs.noop
}